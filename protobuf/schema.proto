syntax = "proto3";
import "nanopb.proto";

message Packet {    
  oneof content {
    // From Apps/UDP to Octopus.Mixer to Firmware 
    Frame frame = 2;
    WFrame w_frame = 3;
    RGBFrame rgb_frame = 4;
    // AudioFrame audio_frame = 5;

    // From joystick controller to Octopus to  app/UDP
    InputEvent input_event = 6;

    // Configures firmware, not forwarded by the mixer
    Config config = 1; 
  }
}

// Frame with one byte per pixel and an RGB palette that defines the colors.
message Frame {
  bytes data = 1 [(nanopb).max_size = 640]; // Selects pixel colors from the palette. First pixel is top left. One panel after the other.
  bytes palette = 2 [(nanopb).max_size = 192]; // Series of RGB values. 8bit per color.
}

// The same as the frame but with access to the white component in the palette (RGBW).
// Not yet implemented
message WFrame {
  bytes data = 1 [(nanopb).max_size = 640]; // Selects pixel colors from the palette. First pixel is top left. One panel after the other.
  bytes palette = 2 [(nanopb).max_size = 256]; // Series of RGBW values. 8bit per color.
}

// Frame with 3 bytes per pixel (RGB).
// not yet implemented
message RGBFrame {
  bytes data = 1 [(nanopb).max_size = 1920]; // Series of RGB values. 8bit per color. First pixel is top left. One panel after the other.
}

message Config {
  uint32 luminance = 1;

  uint32 easing_interval_ms = 2;
  EasingMode easing_mode = 3;

  bool show_test_frame = 4;
  uint32 config_phash = 5;

  bool enable_calibration = 6;
}

enum EasingMode {
  LINEAR = 0;
	EASE_IN_QUAD = 1;
	EASE_OUT_QUAD = 2;
	EASE_IN_OUT_QUAD = 3;
	EASE_IN_CUBIC = 4;
	EASE_OUT_CUBIC = 5;
	EASE_IN_OUT_CUBIC = 6;
	EASE_IN_QUART = 7;
	EASE_OUT_QUART = 8;
	EASE_IN_OUT_QUART = 9;
	EASE_IN_QUINT = 10;
	EASE_OUT_QUINT = 11;
	EASE_IN_OUT_QUINT = 12;
	EASE_IN_EXPO = 13;
	EASE_OUT_EXPO = 14;
	EASE_IN_OUT_EXPO = 15;
}

// This is not ideal and might change
message InputEvent {
  EventType type = 1;
  uint32 value = 2;  // 1: pressed, 0: released
}

enum EventType {
  BUTTON_1 = 0;
  BUTTON_2 = 1;
  BUTTON_3 = 2;
  BUTTON_4 = 3;
  BUTTON_5 = 4;
  BUTTON_6 = 5;
  BUTTON_7 = 6;
  BUTTON_8 = 7;
  BUTTON_9 = 8;
  BUTTON_10 = 9;

  // todo: direction
}

// From Firmware to Octopus, internal use only
message FirmwarePacket {
  oneof content {
    FirmwareInfo client_info = 1;
    RemoteLog remote_log = 2;
  }
}

message FirmwareInfo {
  string hostname = 1 [(nanopb).max_length = 20];
  string build_time = 2 [(nanopb).max_length = 20];
  uint32 panel_index = 3;
  uint32 fps = 4;
  uint32 config_phash = 5;
}

message RemoteLog {
  string message = 1 [(nanopb).max_length = 100];
}

message AudioPacket {
  oneof content {
    AudioConfig config = 1;
    SamplePlayMessage playMessage = 2;
  }
}

message AudioConfig {
  string deviceName = 1;
  int32 numInputs = 2;
  int32 numOutputs = 3;
}

message SamplePlayMessage {
  string uri = 1;
  uint32 channel = 2;
  bool start = 3;
}
