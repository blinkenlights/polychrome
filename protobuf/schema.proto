syntax = "proto3";
import "nanopb.proto";

// wrapper for all messages
message Packet {    
  oneof content {
    // Frames with pixel data.
    Frame frame = 2;
    WFrame w_frame = 3;
    RGBFrame rgb_frame = 4;

    // Frames with audio data
    AudioFrame audio_frame = 5;

    // Events from the input controllers
    InputEvent input_event = 6;

    // Events around controlling apps
    ControlEvent control_event = 9;

    // ** Internal use only **
    FirmwareConfig firmware_config = 1; 
    RGBFrame rgb_frame_part1 = 7;
    RGBFrame rgb_frame_part2 = 8;
  }
}

// Frame with one byte per pixel and an RGB palette that defines the colors.
message Frame {
  bytes data = 1 [(nanopb).max_size = 640]; // Selects pixel colors from the palette. First pixel is top left. One panel after the other.
  bytes palette = 2 [(nanopb).max_size = 192]; // Series of RGB values. 8bit per color.
  uint32 easing_interval = 3; // Optional. In milliseconds. Fade this frame over the previous one with an easing curve. Colors are blended in gamma corrected RGB space.
}

// The same as the frame but with access to the white component in the palette (RGBW).
message WFrame {
  bytes data = 1 [(nanopb).max_size = 640]; // Selects pixel colors from the palette. First pixel is top left. One panel after the other.
  bytes palette = 2 [(nanopb).max_size = 256]; // Series of RGBW values. 8bit per color.
  uint32 easing_interval = 3; // Optional. In milliseconds. Fade this frame over the previous one with an easing curve. Colors are blended in gamma corrected RGB space.
}

// Frame with 3 bytes per pixel (RGB) and no color palette
// not yet implemented
message RGBFrame {
  bytes data = 1 [(nanopb).max_size = 1920]; // Series of RGB values. 8bit per color. First pixel is top left. One panel after the other.
  uint32 easing_interval = 2; // Optional. In milliseconds. Fade this frame over the previous one with an easing curve. Colors are blended in gamma corrected RGB space.
}

// AudioFrame with uri of the sample to be played and the channel number
message AudioFrame {
  string uri = 1; // supports file://<path>, http(s)://<url> with .wav or .aiff files
  uint32 channel = 2;
}

message InputEvent {
  InputType type = 1;
  int32 value = 3; // 0 or 1 for buttons, -1 to 1 for directions
}

enum InputType {
  BUTTON_1 = 0;
  BUTTON_2 = 1;
  BUTTON_3 = 2;
  BUTTON_4 = 3;
  BUTTON_5 = 4;
  BUTTON_6 = 5;
  BUTTON_7 = 6;
  BUTTON_8 = 7;
  BUTTON_9 = 8;
  BUTTON_10 = 9;

  AXIS_X_1 = 10;
  AXIS_Y_1 = 11;
  
  AXIS_X_2 = 12;
  AXIS_Y_2 = 13;
  
  BUTTON_1_A = 14;
  BUTTON_1_B = 15;
  BUTTON_2_A = 16;
  BUTTON_2_B = 17;
}

message ControlEvent {
  ControlEventType type = 1;
}

enum ControlEventType{
  APP_SELECTED = 0;     // Emitted by octopus when an app is displayed
  APP_DESELECTED = 1;   // Emitted by octopus when the app is no longer displayed
  APP_STARTED = 2;      // Emitted by apps when they start
  APP_STOPPED = 3;      // Emitted by apps when they are finished. Eg to signal that the next app can be selected.
}

message FirmwareConfig {
  uint32 luminance = 1;

  EasingMode easing_mode = 2;

  bool show_test_frame = 3;
  uint32 config_phash = 4;

  bool enable_calibration = 5;
}

enum EasingMode {
  LINEAR = 0;
	EASE_IN_QUAD = 1;
	EASE_OUT_QUAD = 2;
	EASE_IN_OUT_QUAD = 3;
	EASE_IN_CUBIC = 4;
	EASE_OUT_CUBIC = 5;
	EASE_IN_OUT_CUBIC = 6;
	EASE_IN_QUART = 7;
	EASE_OUT_QUART = 8;
	EASE_IN_OUT_QUART = 9;
	EASE_IN_QUINT = 10;
	EASE_OUT_QUINT = 11;
	EASE_IN_OUT_QUINT = 12;
	EASE_IN_EXPO = 13;
	EASE_OUT_EXPO = 14;
	EASE_IN_OUT_EXPO = 15;
}


// From Firmware to Octopus, internal use only
message FirmwarePacket {
  oneof content {
    FirmwareInfo firmware_info = 1;
    RemoteLog remote_log = 2;
  }
}

message FirmwareInfo {
  string hostname = 1 [(nanopb).max_length = 20];
  string build_time = 2 [(nanopb).max_length = 20];
  uint32 panel_index = 3;
  uint32 frames_per_second = 4;
  uint32 config_phash = 5;
  string mac = 6 [(nanopb).max_length = 17];
  string ipv4 = 7 [(nanopb).max_length = 15];
  string ipv6_local = 8 [(nanopb).max_length = 39];
  string ipv6_global = 9 [(nanopb).max_length = 39];
  uint32 packets_per_second = 10;
  uint64 uptime = 11;
  uint32 heap_size = 12;
  uint32 free_heap = 13;
}

message RemoteLog {
  string message = 1 [(nanopb).max_length = 100];
}
